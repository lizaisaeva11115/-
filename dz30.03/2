#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

int levensteinInstruction(string s1, string s2, int InsertCost, int DeleteCost, int ReplaceCost) {
int M, N;
M = s1.size();
N = s2.size();
vector <vector <int» D(M + 1, vector <int> (N + 1));
D[0][0] = 0;
for (int j = 1; j <= N; ++j)
D[0][j] = D[0][j - 1] + InsertCost;
for (int i = 1; i <= M; ++i)
{
D[i][0] = D[i - 1][0] + DeleteCost;
for (int j = 1; j <= N; ++j)
{
if (s1[i] != s2[j])
D[i][j] = min(D[i - 1][j] + DeleteCost, min(D[i][j - 1] + InsertCost, D[i - 1][j - 1] + ReplaceCost));
else
D[i][j] = D[i - 1][j - 1];
}
}
return D[M][N];
}

int main() {
string s1, s2;
int InsertCost = 1, DeleteCost = 1, ReplaceCost = 1;
getline(cin, s1);
getline(cin, s2);
cout « levensteinInstruction(s1, s2, InsertCost, DeleteCost, ReplaceCost);
return 0;
}
